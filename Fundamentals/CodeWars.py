# Задание 1. Сможете ли вы найти иголку в стоге сена? Напишите функцию findNeedle(),
# которая принимает array с кучей мусора, но содержащую одно "needle". После того как ваша функция найдёт нужную информацию,
# она должна вернуть сообщение (в виде строки) следующего содержания: "found the needle at position " плюс index — и иголка нашлась, так что:
# Пример (ввод —> вывод)^: ["hay", "junk", "hay", "hay", "moreJunk", "needle", "randomJunk"] --> "found the needle at position 5".

print("Задание №1\n----------------------------------------------")
def find_needle(haystack):
    # Находим индекс элемента "needle" в списке
    index = haystack.index("needle")
    # Формируем и возвращаем результат в нужном формате
    return f"found the needle at position {index}"

# Пример работы функции
print(find_needle(["hay", "junk", "hay", "hay", "moreJunk", "randomJunk", "needle"]))
# Вывод: "found the needle at position 6"
print()

# Задание 2. Напишите функцию, которая вычисляет среднее арифметическое чисел в заданном массиве.
# Примечание: Пустые массивы должны возвращать 0.

print("Задание №2\n----------------------------------------------")
def find_average(numbers):
    # Проверяем, пуст ли список
    if not numbers:
        return 0

    # Вычисляем сумму всех чисел
    total_sum = sum(numbers)

    # Вычисляем количество чисел
    count = len(numbers)

    # Возвращаем среднее арифметическое
    return total_sum / count

# Примеры работ функции
print(f"Среднее арифметическое чисел от 1 до 6: {find_average([1, 2, 3, 4, 5, 6])}") # Вывод: 3.5
print(f"Среднее арифметическое чисел от 1 до 6: {find_average([])}") # Вывод: 0
print()

# Задание 3. Напишите функцию для преобразования имени в инициалы.
# В этом задании нужно использовать только два слова, разделённых пробелом. На выходе должны получиться две заглавные
# буквы, разделённые точкой. Это должно выглядеть так: Sam Harris => S.H; patrick feeney => P.F

print("Задание №3\n----------------------------------------------")
def abbrev_name(name):
    # Разделяем имя на части
    parts = name.split()

    # Проверяем, что у нас ровно два слова
    if len(parts) != 2:
        raise ValueError("Имя должно содержать ровно два слова")

    # Получаем первую букву каждого слова и преобразуем в верхний регистр
    first_initial = parts[0][0].upper()
    last_initial = parts[1][0].upper()

    # Возвращаем результат в нужном формате
    return f"{first_initial}.{last_initial}"

# Тестовые случаи
print(abbrev_name("Sam Harris")) # Вывод: S.H
print(abbrev_name("patrick feeney")) # Вывод: P.F
print(abbrev_name("mary jane")) # Вывод: M.J
print(abbrev_name("john doe")) # Вывод: J.D
print()

# Задание 4. Создайте простую функцию под названием greet, которая возвращает самое известное выражение «hello world!».

print("Задание №4\n----------------------------------------------")
def greet():
    return "hello " + "world" + "!"

# Вариант использования
print(greet())
print()

# Задание 5. Создайте функцию, которая принимает целое число в качестве аргумента и возвращает "Even" для чётных чисел
# или "Odd" для нечётных чисел.

print("Задание №5\n----------------------------------------------")
def even_or_odd(number):
 # Проверяем остаток от деления на 2
 if number % 2 == 0:
     return "Even"
 else:
     return "Odd"

# Пример 1: чётное число
print(even_or_odd(4)) # Вывод: Even

# Пример 2: нечётное число
print(even_or_odd(7)) # Вывод: Odd

# Пример 3: отрицательное чётное число
print(even_or_odd(-2)) # Вывод: Even

# Пример 4: отрицательное нечётное число
print(even_or_odd(-5)) # Вывод: Odd

# Пример 5: ноль
print(even_or_odd(0)) # Вывод: Even
print()

# Задание 6. Тимми и Сара думают, что влюблены друг в друга, но там, где они живут, об этом можно узнать, только если
# каждый из них сорвёт по цветку. Если у одного цветка чётное количество лепестков, а у другого — нечётное, значит, они влюблены.
# Напишите функцию, которая будет принимать количество лепестков у каждого цветка и возвращать true, если они влюблены,
# и false, если нет.

print("Задание №6\n----------------------------------------------")
def lovefunc(flower1, flower2):
    return (flower1 % 2 == 0) != (flower2 % 2 == 0)

# Примеры использования
print(lovefunc(4, 3))  # True (четный и нечетный)
print(lovefunc(2, 6))  # False (оба четные)
print(lovefunc(1, 5))  # False (оба нечетные)
print(lovefunc(0, 1))  # True (0 - четный, 1 - нечетный)
print()

# Задание 7. После напряжённой рабочей недели вы решаете немного отдохнуть в отпуске.
# Поэтому вы бронируете билеты для себя и своей девушки и пытаетесь оставить все проблемы позади.
# Чтобы передвигаться во время отпуска, вам понадобится арендованный автомобиль.
# Менеджер по аренде автомобилей делает вам несколько выгодных предложений. Каждый день аренды автомобиля стоит 40 долларов.
# Если вы арендуете автомобиль на 7 и более дней, вы получаете скидку 50 долларов.
# Кроме того, если вы арендуете автомобиль на 3 и более дней, вы получаете скидку 20 долларов.
# Напишите код, который выводит общую сумму за разные дни (d).

print("Задание №7\n----------------------------------------------")
def rental_car_cost(d):
    # Базовая стоимость
    base_cost = 40 * d

    # Проверяем условия скидок
    if d >= 7:
        # Применяем скидку 50 долларов
        return base_cost - 50
    elif d >= 3:
        # Применяем скидку 20 долларов
        return base_cost - 20
    else:
        # Без скидок
        return base_cost

# Примеры использования:
print(f"Стоимость за 2 арендованных дня: {rental_car_cost(2)} долларов.") # 80 долларов (без скидок)
print(f"Стоимость за 3 арендованных дня: {rental_car_cost(3)} долларов.") # 100 долларов (скидка 20)
print(f"Стоимость за 7 арендованных дней: {rental_car_cost(7)} долларов.") # 230 долларов (скидка 50)
print(f"Стоимость за 10 арендованных дней: {rental_car_cost(10)} долларов.") # 350 долларов (скидка 50)
print()

# Задание 8. Очень просто: дано число (целое / десятичное / и то, и другое, в зависимости от языка),
# найдите его противоположное значение (аддитивную инверсию).

print("Задание №8\n----------------------------------------------")
def opposite(number):
    return -number

# Примеры использования:
print(opposite(5))  # Выведет: -5
print(opposite(-3)) # Выведет: 3
print(opposite(0)) # Выведет: 0
print(opposite(3.14)) # Выведет: -3.14
print(opposite(-2.71)) # Выведет: 2.71
print()

# Задание 9. Напишите функцию, которая принимает в качестве параметров неотрицательное целое число n и строку s,
# а возвращает строку, состоящую из s символов, повторенных ровно n раз.

print("Задание №9\n----------------------------------------------")
def repeat_str(repeat, string):
    return string * repeat

# Примеры использования:
print(repeat_str(3, "abc")) # Выведет: abcabcabc
print(repeat_str(0, "test")) # Выведет: (пустая строка)
print(repeat_str(1, "hello")) # Выведет: hello
print(repeat_str(5, "x")) # Выведет: xxxxx
print()

# Задание 10. Наша футбольная команда завершила чемпионат. Результаты матчей нашей команды записаны в виде набора строк.
# Каждый матч представлен строкой в формате "x:y", где x — счёт нашей команды, а y — счёт наших соперников.
# Например: ["3:1", "2:2", "0:1", ...]
# Очки начисляются за каждый матч следующим образом:
# если x > y: 3 очка (победа)
# если x < y: 0 очков (проигрыш)
# если x = y: 1 балл (ничья)
# Нам нужно написать функцию, которая будет принимать эту коллекцию и возвращать количество очков,
# набранных нашей командой (x) в чемпионате, в соответствии с приведёнными выше правилами.
# Примечания: наша команда всегда играет 10 матчей в рамках чемпионата.
# 0 ≤ x ≤ 4
# 0 <= y <= 4

print("Задание №10\n----------------------------------------------")
def points(games):
    total_points = 0

    for game in games:
        # Разделяем строку на две части
        our_score, opponent_score = map(int, game.split(':'))

        # Начисляем очки в зависимости от результата
        if our_score > opponent_score:
            total_points += 3  # Победа
        elif our_score == opponent_score:
            total_points += 1  # Ничья
        else:
            # Проигрыш - очков нет
            pass

    return total_points

# Примеры использования:
print(points(["3:1", "2:2", "0:1"])) # Выведет: 4 (3 за победу + 1 за ничью)
print(points(["1:0", "1:1", "2:0", "0:0", "3:0"])) # Выведет: 11
print(points(["0:0", "0:0", "0:0", "0:0", "0:0", "0:0", "0:0", "0:0", "0:0", "0:0"])) # Выведет: 10 (все ничьи)
print(points(["4:0", "4:0", "4:0", "4:0", "4:0", "4:0", "4:0", "4:0", "4:0", "4:0"])) # Выведет: 30 (все победы)
print()

# Задание 11. Вам дано случайное неотрицательное число. Вы должны вернуть цифры этого числа в виде массива в обратном порядке.

print("Задание №11\n----------------------------------------------")
def digitize(n):
    # Преобразуем число в строку, переворачиваем её и преобразуем каждый символ обратно в число
    return [int(digit) for digit in str(n)[::-1]]

# Примеры использования:
print(digitize(123)) # [3, 2, 1]
print(digitize(98765)) # [5, 6, 7, 8, 9]
print(digitize(0)) # [0]
print(digitize(100)) # [0, 0, 1]
print()

# Задание 12. Создайте функцию, которая принимает параметр, представляющий собой name, и возвращает
# сообщение: "Hello, <name> how are you doing today?".

print("Задание №12\n----------------------------------------------")
def greet(name):
    """
    Функция для приветствия пользователя

    Параметры:
    name (str) - имя пользователя

    Возвращает:
    str - приветственное сообщение
    """
    return f"Hello, {name} how are you doing today?"

# Примеры использования:
print(greet("Alice")) # Hello, Alice how are you doing today?
print(greet("Bob")) # Hello, Bob how are you doing today?
print(greet("John Doe")) # Hello, John Doe how are you doing today?
print()

# Задание 13. Сложите все числа в заданном массиве (списке), кроме самого большого и самого маленького элемента
# (по значению, а не по индексу!). Наибольший или наименьший элемент соответственно — это один элемент на каждом ребре,
# даже если есть несколько элементов с одинаковым значением. Следите за проверкой входных данных.
# Если вместо массива указано пустое значение (null, None, Nothing, nil и т.д.) или если указанный массив является
# пустым списком или списком, содержащим только элемент 1, верните 0.

print("Задание №13\n----------------------------------------------")
def sum_array(arr):
    # Проверяем валидность входных данных
    if arr is None or len(arr) <= 1:
        return 0

    # Находим минимальное и максимальное значения
    min_val = min(arr)
    max_val = max(arr)

    # Создаем копию списка и удаляем по одному вхождению min и max
    temp_arr = arr.copy()
    temp_arr.remove(min_val)
    temp_arr.remove(max_val)

    # Возвращаем сумму оставшихся элементов
    return sum(temp_arr)

# Примеры использования:
print(sum_array([6, 2, 1, 8, 10])) # 16 (2 + 6 + 8)
print(sum_array([1, 1, 1, 1])) # 2 (удаляем одно 1 с каждого края)
print(sum_array([4])) # 0 (массив содержит только один элемент)
print(sum_array([])) # 0 (пустой массив)
print(sum_array(None)) # 0 (None)
print(sum_array([5, 5])) # 0 (после удаления остается пустой массив)
print()

# Задание 14. Дан массив целых чисел. Верните массив, в котором первый элемент — это количество положительных чисел,
# а второй элемент — сумма отрицательных чисел. 0 не является ни положительным, ни отрицательным числом.
# Если входные данные представляют собой пустой массив или значение null, верните пустой массив.

print("Задание №14\n----------------------------------------------")
def count_positives_sum_negatives(arr):
    # Проверяем валидность входных данных
    if arr is None or len(arr) == 0:
        return []

    # Инициализируем счетчики
    positive_count = 0
    negative_sum = 0

    # Проходим по всем элементам массива
    for num in arr:
        if num > 0:
            positive_count += 1
        elif num < 0:
            negative_sum += num

    # Возвращаем результат в виде списка
    return [positive_count, negative_sum]

# Примеры использования:
print(count_positives_sum_negatives([1, 2, 3, -4, -5])) # [3, -9]
print(count_positives_sum_negatives([0, 0, 0])) # [0, 0]
print(count_positives_sum_negatives([-1, -2, -3])) # [0, -6]
print(count_positives_sum_negatives([1, 2, 3])) # [3, 0]
print(count_positives_sum_negatives([])) # []
print(count_positives_sum_negatives(None)) # []
print()

# Задание 15. Дан массив целых чисел в виде строк и чисел.
# Верните сумму значений массива, как если бы все они были числами. Верните ответ в виде числа.

print("Задание №15\n----------------------------------------------")
def sum_mix(arr):
    # Преобразуем все элементы в числа и суммируем
    return sum(int(x) for x in arr)

# Примеры использования:
print(sum_mix([1, '2', 3, '4'])) # 10
print(sum_mix(['5', '6', 7, 8])) # 26
print(sum_mix([0, '0', 0])) # 0
print(sum_mix(['10', 20, '30'])) # 60
print()

# Задание 16. Пишите код как можно быстрее! Вам нужно удвоить целое число и вернуть результат.

print("Задание №16\n----------------------------------------------")
def double_integer(i):
    return i * 2

# Примеры использования:
print(double_integer(2)) # 4
print(double_integer(-4)) # -8
print(double_integer(6)) # 12
print(double_integer(60)) # 120
print()

# Задание 17. В крокетном клубе Western Suburbs есть две категории членства: для пожилых людей и для всех желающих.
# Им нужна ваша помощь с заполнением анкеты, в которой потенциальные члены клуба смогут указать, к какой категории они относятся.
# Чтобы стать старшим членом клуба, нужно быть не моложе 55 лет и иметь гандикап выше 7.
# В этом крокетном клубе гандикапы варьируются от -2 до +26; чем лучше игрок, тем ниже гандикап.
#
# Входные данные
# Входные данные будут представлять собой список пар. Каждая пара содержит информацию об одном потенциальном участнике.
# Информация состоит из целого числа, обозначающего возраст человека, и целого числа, обозначающего инвалидность человека.
#
# Выходной сигнал
# На выходе будет список строковых значений (в Haskell и C: Open или Senior), указывающих, в какую категорию следует
# отнести соответствующего участника: к старшей или открытой.

print("Задание №17\n----------------------------------------------")
def open_or_senior(data):
    # Создаем список для хранения результатов
    result = []

    # Проходим по каждой паре (возраст, гандикап) в входных данных
    for age, handicap in data:
        # Проверяем условия для старшего участника
        if age >= 55 and handicap > 7:
            result.append("Senior")
        else:
            result.append("Open")

    return result

# Примеры использования:
print(open_or_senior([(45, 12), (55, 10), (60, 6)])) # ['Open', 'Senior', 'Open']
print(open_or_senior([(56, 8), (55, 7), (60, 8)])) # ['Senior', 'Open', 'Senior']
print(open_or_senior([(54, 8), (55, 8), (56, 7)])) # ['Open', 'Senior', 'Open']
print()

# Задание 18. Дезоксирибонуклеиновая кислота (ДНК) — это химическое вещество, которое содержится в ядре клеток и
# содержит «инструкции» для развития и функционирования живых организмов. Если хотите узнать больше: http://en.wikipedia.org/wiki/ДНК
# В цепочках ДНК символы «A» и «T» являются комплементарными друг другу, как и «C» и «G» Ваша функция получает одну
# сторону ДНК (строку, за исключением Haskell); вам нужно вернуть другую комплементарную сторону.
# Цепочка ДНК никогда не бывает пустой или вообще не содержит ДНК (опять же, за исключением Haskell).
# Другие похожие упражнения можно найти здесь: http://rosalind.info/problems/list-view/ (источник)

print("Задание №18\n----------------------------------------------")
def DNA_strand(dna):
    # Создаем словарь соответствий нуклеотидов
    complement = {
        'A': 'T',
        'T': 'A',
        'C': 'G',
        'G': 'C'
    }

    # Используем генераторное выражение для создания комплементарной последовательности
    return ''.join(complement[base] for base in dna.upper())

# Примеры использования:
print(DNA_strand("ATTGC")) # Вернет "TAACG"
print(DNA_strand("GTAT")) # Вернет "CATA"
print(DNA_strand("atcg")) # Вернет "tagc" (работает с любым регистром)
print(DNA_strand("CGAT")) # Вернет "GCTA"
print()

# Задание 19. Напишите программу, которая фильтрует список строк и возвращает список, содержащий только имена ваших друзей.
# Если в имени ровно 4 буквы, можете быть уверены, что это ваш друг! В противном случае можете быть уверены, что это не...
# Входные строки будут содержать только буквы.
# Примечание: сохраните исходный порядок имён в выходных данных.

print("Задание №19\n----------------------------------------------")
def friend(x):
    # Создаем пустой список для хранения имен друзей
    friends_list = []

    # Проходим по каждому имени во входном списке
    for name in x:
        # Проверяем, состоит ли имя ровно из 4 букв
        if len(name) == 4:
            # Если да, добавляем имя в список друзей
            friends_list.append(name)

    # Возвращаем список друзей, сохраняя исходный порядок
    return friends_list

# Примеры использования:
names = ["Anna", "Bob", "Eve", "John", "Kate", "Alex"]
result = friend(names)
print(result) # Выведет: ['Anna', 'John', 'Kate']
print()

# Задание 20. Рассмотрим треугольник из последовательных нечётных чисел:
#              1
#           3     5
#        7     9    11
#    13    15    17    19
# 21    23    25    27    29
# ...
# Вычислите сумму чисел в n-м ряду этого треугольника (начиная с индекса 1), например:
# (Входные данные —> Выходные данные)
# 1 --> 1
# 2 --> 3 + 5 = 8

print("Задание №20\n----------------------------------------------")
def row_sum_odd_numbers(n):
    # Возвращаем куб числа n
    return n ** 3

# Примеры использования:
print(row_sum_odd_numbers(1)) # 1
print(row_sum_odd_numbers(2)) # 8 (3 + 5)
print(row_sum_odd_numbers(3)) # 27 (7 + 9 + 11)
print(row_sum_odd_numbers(4)) # 64 (13 + 15 + 17 + 19)
print()

# Задание 21. Тролли атакуют ваш раздел комментариев! Распространённый способ справиться с такой ситуацией —
# удалить из комментариев троллей все гласные, чтобы нейтрализовать угрозу.
# Ваша задача — написать функцию, которая принимает строку и возвращает новую строку без гласных.
# Например, строка "Этот веб-сайт для неудачников, ЛОЛ!" станет "Ths wbst s fr lsrs LL!".
# Примечание: в этом ката y не считается гласной.

print("Задание №21\n----------------------------------------------")
def disemvowel(string_):
    # Создаем множество гласных для быстрой проверки
    vowels = set("aeiouAEIOU")
    # Собираем результат через list comprehension
    result = [char for char in string_ if char not in vowels]
    # Объединяем список обратно в строку
    return ''.join(result)

# Примеры использования:
print(disemvowel("This website is for losers LOL!"))  # Ths wbst s fr lsrs LOL!
print(disemvowel("Hello World")) # Hll Wrld
print(disemvowel("AEIOUaeiou")) # (пустая строка)
print(disemvowel("Python")) # Pythn
print()

# Задание 22. Часы показывают h часов, m минут и s секунд после полуночи.
# Ваша задача — написать функцию, которая возвращает время, прошедшее с полуночи, в миллисекундах.
# Пример:
# h = 0
# m = 1
# s = 1
# result = 61000

# Входные ограничения:
# 0 <= h <= 23
# 0 <= m <= 59
# 0 <= s <= 59

print("Задание №22\n----------------------------------------------")
def past(h, m, s):
    # Переводим часы в миллисекунды
    hours_ms = h * 3600 * 1000
    # Переводим минуты в миллисекунды
    minutes_ms = m * 60 * 1000
    # Переводим секунды в миллисекунды
    seconds_ms = s * 1000
    # Суммируем все значения
    return hours_ms + minutes_ms + seconds_ms

# Примеры использования:
print(past(0, 1, 1)) # 61000
print(past(1, 0, 0)) # 3600000
print(past(23, 59, 59)) # 86399000
print(past(0, 0, 0)) # 0
print()

# Задание 23. В вашем классе был тест, и вы его сдали. Поздравляем! Но вы амбициозный человек.
# Вы хотите знать, лучше ли вы, чем среднестатистический ученик вашего класса.
# Вы получаете массив с результатами тестов ваших сверстников. Теперь вычислите среднее значение и сравните свой результат!
# Возвращайся, true если тебе станет лучше, иначе false!

# Примечание:
# Ваши баллы не включены в общий список баллов вашего класса. Не забудьте их при подсчёте среднего балла!

print("Задание №23\n----------------------------------------------")
def better_than_average(class_points, your_points):
    # Вычисляем сумму всех баллов в классе
    total_points = sum(class_points)
    # Вычисляем общее количество учеников (включая себя)
    total_students = len(class_points) + 1
    # Вычисляем среднее значение
    average = (total_points + your_points) / total_students
    # Сравниваем свои баллы со средним значением
    return your_points > average

# Примеры использования:
print(better_than_average([2, 2, 3], 5)) # True (среднее = 3)
print(better_than_average([100, 40, 34, 57, 29, 72, 57, 88], 75)) # True (среднее ≈ 61.3)
print(better_than_average([12, 23, 34, 45, 56], 30)) # False (среднее = 34)
print(better_than_average([100], 100)) # False (среднее = 100)
print()

# Задание 24. По городу курсирует автобус, который забирает и высаживает людей на каждой остановке.
# Вам предоставлен список (или массив) пар целых чисел. Элементы каждой пары представляют собой количество людей,
# которые садятся в автобус (первый элемент), и количество людей, которые выходят из автобуса (второй элемент) на автобусной остановке.
# Ваша задача — вернуть количество людей, которые всё ещё находятся в автобусе после последней остановки (после последнего массива).
# Несмотря на то, что это последняя остановка, автобус может быть не пуст, и в нём могут оставаться люди, которые, вероятно, спят :D
# Взгляните на тестовые примеры. Пожалуйста, имейте в виду, что тестовые примеры гарантируют, что количество людей в автобусе всегда равно >= 0.
# Таким образом, возвращаемое целое число не может быть отрицательным. Второе значение в первой паре массива равно 0,
# так как на первой остановке автобус пуст.

print("Задание №24\n----------------------------------------------")
def number(bus_stops):
    # Инициализируем счетчик пассажиров
    passengers = 0

    # Проходим по каждой остановке
    for stop in bus_stops:
        # Прибавляем вошедших
        passengers += stop[0]
        # Вычитаем вышедших
        passengers -= stop[1]

    return passengers

# Пример 1:
# [[10,0], [3,5], [2,2]]
# 10 входят, 0 выходят
# 3 входят, 5 выходят
# 2 входят, 2 выходят
# Итого: 10 + 3 - 5 + 2 - 2 = 8
print(number([[10,0], [3,5], [2,2]])) # Вывод: 8

# Пример 2:
# [[3,0], [9,1], [4,8], [12,2]]
# 3 входят, 0 выходят
# 9 входят, 1 выходит
# 4 входят, 8 выходят
# 12 входят, 2 выходят
# Итого: 3 + 9 - 1 + 4 - 8 + 12 - 2 = 17
print(number([[3,0], [9,1], [4,8], [12,2]])) # Вывод: 17
print()

# Задание 25. На этот раз ни истории, ни теории.
# В примерах ниже показано, как написать функцию accum:
# Примеры:
# accum("abcd") -> "A-Bb-Ccc-Dddd"
# accum("RqaEzty") -> "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"
# accum("cwAt") -> "C-Ww-Aaa-Tttt"
# Параметр accum представляет собой строку, содержащую только буквы a..z и A..Z.

print("Задание №25\n----------------------------------------------")
def accum(st):
    # Создаем список для хранения промежуточных результатов
    result = []

    # Перебираем каждую букву с её индексом
    for i, char in enumerate(st):
        # Формируем элемент: первая буква заглавная, остальные строчные
        element = char.upper() + char.lower() * i
        # Добавляем в результат
        result.append(element)

    # Соединяем все элементы через дефис
    return '-'.join(result)

# Пример 1:
print(accum("abcd")) # Вывод: "A-Bb-Ccc-Dddd"

# Пример 2:
print(accum("RqaEzty")) # Вывод: "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"

# Пример 3:
print(accum("cwAt")) # Вывод: "C-Ww-Aaa-Tttt"
print()

# Задание 26. Дополните решение так, чтобы оно возвращало переданную строку в обратном порядке.
# 'world'  =>  'dlrow'
# 'word'   =>  'drow'

print("Задание №26\n----------------------------------------------")
def solution(string):
    return string[::-1]

# Тестовые случаи
print(solution('world')) # Вывод: 'dlrow'
print(solution('word')) # Вывод: 'drow'
print(solution('hello')) # Вывод: 'olleh'
print(solution('python')) # Вывод: 'nohtyp'
print()

# Задание 27. Нам нужна функция, которая может преобразовывать число (целое) в строку.
# Какие способы достижения этой цели вы знаете?

print("Задание №27\n----------------------------------------------")
def number_to_string(num):
    return str(num)  # Самый простой и читаемый способ

# Тестирование
print(number_to_string(123)) # "123"
print(number_to_string(-456)) # "-456"
print(number_to_string(0)) # "0"
print(number_to_string(3.14)) # "3.14" (работает и с float)
print(type(number_to_string(123))) # <class 'str'>
print()

# Задание 28. Джейден Смит, сын Уилла Смита, снялся в таких фильмах, как «Каратэ-пацан» (2010) и «После нашей эры» (2013).
# Джейден также известен некоторыми своими философскими высказываниями, которые он публикует в Twitter.
# В Twitter он почти всегда пишет каждое слово с заглавной буквы. Для простоты вам тоже придётся писать каждое слово с заглавной буквы.
# Посмотрите, как должны выглядеть сокращения в примере ниже. Ваша задача — преобразовать строки так, как их написал бы Джейден Смит.
# Строки — это реальные цитаты Джейдена Смита, но они написаны не с заглавной буквы, как он их изначально набрал.

# Пример:
# Not Jaden-Cased: "How can mirrors be real if our eyes aren't real"
# Jaden-Cased:     "How Can Mirrors Be Real If Our Eyes Aren't Real"

print("Задание №28\n----------------------------------------------")
def to_jaden_case(string):
    # Разбиваем строку на слова
    words = string.split()
    # Преобразуем каждое слово с заглавной буквы
    capitalized_words = [word.capitalize() for word in words]
    # Соединяем слова обратно в строку
    return ' '.join(capitalized_words)

# Пример 1:
print(to_jaden_case("how can mirrors be real if our eyes aren't real"))
# Вывод: "How Can Mirrors Be Real If Our Eyes Aren't Real"

# Пример 2:
print(to_jaden_case("the way i see it if you want the rainbow you gotta put up with the rain"))
# Вывод: "The Way I See It If You Want The Rainbow You Gotta Put Up With The Rain"

# Пример 3:
print(to_jaden_case("what the costco"))
# Вывод: "What The Costco"
print()

# Задание 29. Создайте функцию, которая отвечает на вопрос «Играете ли вы на банджо?».
# Если ваше имя начинается с буквы «R» или строчной «r», значит, вы играете на банджо!
# Функция принимает имя в качестве единственного аргумента и возвращает одну из следующих строк:
# name + " plays banjo"
# name + " does not play banjo"
# Указанные имена всегда являются корректными строками.

print("Задание №29\n----------------------------------------------")
def are_you_playing_banjo(name):
 return f"{name} plays banjo" if name[0].lower() == 'r' else f"{name} does not play banjo"

# Пример 1:
print(are_you_playing_banjo("Ricky")) # Вывод: "Ricky plays banjo"

# Пример 2:
print(are_you_playing_banjo("rick")) # Вывод: "rick plays banjo"

# Пример 3:
print(are_you_playing_banjo("John")) # Вывод: "John does not play banjo"

# Пример 4:
print(are_you_playing_banjo("robert")) # Вывод: "robert plays banjo"

# Пример 5:
print(are_you_playing_banjo("Alice")) # Вывод: "Alice does not play banjo"
print()

# Задание 30. Для заданного массива целых чисел ваше решение должно найти наименьшее целое число.
# Например:
# При заданных [34, 15, 88, 2] условиях ваше решение вернёт 2
# При заданных [34, -345, -1, 100] условиях ваше решение вернёт -345
# Для целей этого задания можно предположить, что предоставленный массив не будет пустым.

print("Задание №30\n----------------------------------------------")
def find_smallest_int(arr):
    return min(arr)

# Тестовые случаи
print(f"Наименьшее целое число равно: {find_smallest_int([34, 15, 88, 2])}") # Вывод: 2
print(f"Наименьшее целое число равно: {find_smallest_int([34, -345, -1, 100])}") # Вывод: -345
print(f"Наименьшее целое число равно: {find_smallest_int([1, 2, 3, 4, 5])}") # Вывод: 1
print(f"Наименьшее целое число равно: {find_smallest_int([-10, -20, -30, -40])}") # Вывод: -40
print()
